diff --git a/src/plugins/platforms/windows/qwindowssystemtrayicon.cpp b/src/plugins/platforms/windows/qwindowssystemtrayicon.cpp
index c0f4e4d0147495ac784d9cae4a86448f37f1c5e0..b86897ecf3ea16d27cb74862024dabbd960da963 100644
--- a/src/plugins/platforms/windows/qwindowssystemtrayicon.cpp
+++ b/src/plugins/platforms/windows/qwindowssystemtrayicon.cpp
@@ -58,6 +58,7 @@
 #include "qwindowsscreen.h"
 
 #include <QtGui/qpixmap.h>
+#include <QtCore/qcoreapplication.h>
 #include <QtCore/qdebug.h>
 #include <QtCore/qrect.h>
 #include <QtCore/qvector.h>
@@ -65,10 +66,13 @@
 
 #include <qt_windows.h>
 #include <commctrl.h>
+#include <rpc.h>
 #include <shellapi.h>
 #include <shlobj.h>
 #include <windowsx.h>
 
+#pragma comment(lib, "Rpcrt4")
+
 QT_BEGIN_NAMESPACE
 
 static const UINT q_uNOTIFYICONID = 0;
@@ -88,11 +92,42 @@ static inline void qStringToLimitedWCharArray(QString in, wchar_t *target, int m
     target[length] = wchar_t(0);
 }
 
+static inline GUID initTrayIconGuid()
+{
+    const QVariant guidProp = QCoreApplication::instance()->property("TRAY_ICON_GUID");
+    if (guidProp.isValid())
+    {
+        QByteArray guidStr = guidProp.toString().toUtf8();
+        if (!guidStr.isEmpty())
+        {
+            GUID guid;
+            if (UuidFromStringA((unsigned char *)guidStr.data(), &guid) == RPC_S_OK)
+                return guid;
+        }
+    }
+    return GUID_NULL;
+}
+
+static inline GUID trayIconGuid()
+{
+    static const GUID guid = initTrayIconGuid();
+    return guid;
+}
+
 static inline void initNotifyIconData(NOTIFYICONDATA &tnd)
 {
     memset(&tnd, 0, sizeof(NOTIFYICONDATA));
     tnd.cbSize = sizeof(NOTIFYICONDATA);
     tnd.uVersion = NOTIFYICON_VERSION_4;
+
+    if (trayIconGuid() != GUID_NULL)
+    {
+        // If you identify the notification icon with a GUID in one call to Shell_NotifyIcon,
+        // you must use that same GUID to identify the icon in any subsequent Shell_NotifyIcon
+        // calls that deal with that same icon.
+        tnd.uFlags = NIF_GUID;
+        tnd.guidItem = trayIconGuid();
+    }
 }
 
 static void setIconContents(NOTIFYICONDATA &tnd, const QString &tip, HICON hIcon)
@@ -234,6 +269,7 @@ QRect QWindowsSystemTrayIcon::geometry() const
     NOTIFYICONIDENTIFIER nid;
     memset(&nid, 0, sizeof(nid));
     nid.cbSize = sizeof(nid);
+    nid.guidItem = trayIconGuid();
     nid.hWnd = m_hwnd;
     nid.uID = q_uNOTIFYICONID;
     RECT rect;
@@ -286,7 +322,7 @@ void QWindowsSystemTrayIcon::showMessage(const QString &title, const QString &me
     }
     tnd.hWnd = m_hwnd;
     tnd.uTimeout = msecsIn <= 0 ?  UINT(10000) : UINT(msecsIn); // 10s default
-    tnd.uFlags = NIF_INFO | NIF_SHOWTIP;
+    tnd.uFlags |= NIF_INFO | NIF_SHOWTIP;
 
     Shell_NotifyIcon(NIM_MODIFY, &tnd);
 }
@@ -363,7 +399,7 @@ bool QWindowsSystemTrayIcon::sendTrayMessage(DWORD msg)
     initNotifyIconData(tnd);
     tnd.uID = q_uNOTIFYICONID;
     tnd.hWnd = m_hwnd;
-    tnd.uFlags = NIF_SHOWTIP;
+    tnd.uFlags |= NIF_SHOWTIP;
     if (msg != NIM_DELETE && !m_visible)
         setIconVisibility(tnd, m_visible);
     if (msg == NIM_ADD || msg == NIM_MODIFY)
@@ -380,7 +416,8 @@ HICON QWindowsSystemTrayIcon::createIcon(const QIcon &icon)
     m_hIcon = nullptr;
     if (icon.isNull())
         return oldIcon;
-    const QSize requestedSize = QSize(GetSystemMetrics(SM_CXSMICON), GetSystemMetrics(SM_CYSMICON));
+    // Just take the largest pixmap, so that the application can take control of it.
+    const QSize requestedSize = QSize(GetSystemMetrics(SM_CXSMICON), GetSystemMetrics(SM_CYSMICON)) * 10;
     const QSize size = icon.actualSize(requestedSize);
     const QPixmap pm = icon.pixmap(size);
     if (!pm.isNull())
