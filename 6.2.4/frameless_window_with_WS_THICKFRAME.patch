diff --git forkSrcPrefix/qtbase/src/plugins/platforms/windows/qwindowsintegration.cpp forkDstPrefix/qtbase/src/plugins/platforms/windows/qwindowsintegration.cpp
index fdb65e7f8f672b0afdfc1a96fc68f506514e7048..bb9e96bcda6915803a2e173ff0b27425714c1337 100644
--- forkSrcPrefix/qtbase/src/plugins/platforms/windows/qwindowsintegration.cpp
+++ forkDstPrefix/qtbase/src/plugins/platforms/windows/qwindowsintegration.cpp
@@ -363,10 +363,12 @@ QPlatformWindow *QWindowsIntegration::createPlatformWindow(QWindow *window) cons
     requested.geometry = window->isTopLevel()
         ? QHighDpi::toNativePixels(window->geometry(), window)
         : QHighDpi::toNativeLocalPosition(window->geometry(), window);
-    // Apply custom margins (see  QWindowsWindow::setCustomMargins())).
-    const QVariant customMarginsV = window->property("_q_windowsCustomMargins");
-    if (customMarginsV.isValid())
-        requested.customMargins = qvariant_cast<QMargins>(customMarginsV);
+    if (!(requested.flags & Qt::FramelessWindowHint)) {
+        // Apply custom margins (see  QWindowsWindow::setCustomMargins())).
+        const QVariant customMarginsV = window->property("_q_windowsCustomMargins");
+        if (customMarginsV.isValid())
+            requested.customMargins = qvariant_cast<QMargins>(customMarginsV);
+    }
 
     QWindowsWindowData obtained =
         QWindowsWindowData::create(window, requested,
diff --git forkSrcPrefix/qtbase/src/plugins/platforms/windows/qwindowswindow.cpp forkDstPrefix/qtbase/src/plugins/platforms/windows/qwindowswindow.cpp
index 4ea786667681c35e99c3f742addf918607acb01a..4baa27b7776a790f738c8ae68ce75207a8f808a6 100644
--- forkSrcPrefix/qtbase/src/plugins/platforms/windows/qwindowswindow.cpp
+++ forkDstPrefix/qtbase/src/plugins/platforms/windows/qwindowswindow.cpp
@@ -771,7 +771,8 @@ QWindowsWindowData
                                                                        style, exStyle));
     QWindowsContext::instance()->setWindowCreationContext(context);
 
-    const bool hasFrame = (style & (WS_DLGFRAME | WS_THICKFRAME));
+    const bool hasFrame = (style & (WS_DLGFRAME | WS_THICKFRAME))
+                && !(result.flags & Qt::FramelessWindowHint);
     QMargins invMargins = topLevel && hasFrame && QWindowsGeometryHint::positionIncludesFrame(w)
             ? invisibleMargins(QPoint(context->frameX, context->frameY)) : QMargins();
 
@@ -1280,13 +1281,16 @@ QWindowCreationContext::QWindowCreationContext(const QWindow *w, const QScreen *
     requestedGeometry(geometry),
     obtainedPos(geometryIn.topLeft()),
     obtainedSize(geometryIn.size()),
-    margins(QWindowsGeometryHint::frame(w, geometry, style, exStyle)),
-    customMargins(cm)
+    margins(QWindowsGeometryHint::frame(w, geometry, style, exStyle))
 {
     // Geometry of toplevels does not consider window frames.
     // TODO: No concept of WA_wasMoved yet that would indicate a
     // CW_USEDEFAULT unless set. For now, assume that 0,0 means 'default'
     // for toplevels.
+
+    if (!(w->flags() & Qt::FramelessWindowHint))
+        customMargins = cm;
+
     if (geometry.isValid()
         || !qt_window_private(const_cast<QWindow *>(w))->resizeAutomatic) {
         frameX = geometry.x();
@@ -1842,7 +1846,15 @@ void QWindowsWindow::handleDpiScaledSize(WPARAM wParam, LPARAM lParam, LRESULT *
     const qreal scale = QHighDpiScaling::roundScaleFactor(qreal(dpi) / QWindowsScreen::baseDpi) /
                         QHighDpiScaling::roundScaleFactor(qreal(savedDpi()) / QWindowsScreen::baseDpi);
     const QMargins margins = QWindowsGeometryHint::frame(style(), exStyle(), dpi);
-    const QSize windowSize = (geometry().size() * scale).grownBy(margins);
+    if (!(m_data.flags & Qt::FramelessWindowHint)) {
+        // We need to update the custom margins to match the current DPI, because
+        // we don't want our users manually hook into this message just to set a
+        // new margin, but here we can't call setCustomMargins() directly, that
+        // function will change the window geometry which conflicts with what we
+        // are currently doing.
+        m_data.customMargins *= scale;
+    }
+    const QSize windowSize = (geometry().size() * scale).grownBy(margins + customMargins());
     SIZE *size = reinterpret_cast<SIZE *>(lParam);
     size->cx = windowSize.width();
     size->cy = windowSize.height();
@@ -2238,7 +2250,8 @@ QWindowsWindowData QWindowsWindow::setWindowFlags_sys(Qt::WindowFlags wt,
     QWindowsWindowData result = m_data;
     result.flags = creationData.flags;
     result.embedded = creationData.embedded;
-    result.hasFrame = (creationData.style & (WS_DLGFRAME | WS_THICKFRAME));
+    result.hasFrame = (creationData.style & (WS_DLGFRAME | WS_THICKFRAME))
+            && !(creationData.flags & Qt::FramelessWindowHint);
     return result;
 }
 
@@ -2526,6 +2539,8 @@ bool QWindowsWindow::handleGeometryChanging(MSG *message) const
 
 void QWindowsWindow::setFullFrameMargins(const QMargins &newMargins)
 {
+    if (m_data.flags & Qt::FramelessWindowHint)
+        return;
     if (m_data.fullFrameMargins != newMargins) {
         qCDebug(lcQpaWindows) << __FUNCTION__ << window() <<  m_data.fullFrameMargins  << "->" << newMargins;
         m_data.fullFrameMargins = newMargins;
@@ -2543,12 +2558,14 @@ void QWindowsWindow::updateFullFrameMargins()
 
 void QWindowsWindow::calculateFullFrameMargins()
 {
+    if (m_data.flags & Qt::FramelessWindowHint)
+        return;
     // Normally obtained from WM_NCCALCSIZE. This calculation only works
     // when no native menu is present.
     const auto systemMargins = testFlag(DisableNonClientScaling)
         ? QWindowsGeometryHint::frameOnPrimaryScreen(m_data.hwnd)
         : frameMargins_sys();
-    setFullFrameMargins(systemMargins + m_data.customMargins);
+    setFullFrameMargins(systemMargins + customMargins());
 }
 
 QMargins QWindowsWindow::frameMargins() const
@@ -2561,6 +2578,8 @@ QMargins QWindowsWindow::frameMargins() const
 
 QMargins QWindowsWindow::fullFrameMargins() const
 {
+    if (m_data.flags & Qt::FramelessWindowHint)
+        return {};
     return m_data.fullFrameMargins;
 }
 
@@ -3055,6 +3074,13 @@ void QWindowsWindow::setMenuBar(QWindowsMenuBar *mb)
     m_menuBar = mb;
 }
 
+QMargins QWindowsWindow::customMargins() const
+{
+    if (m_data.flags & Qt::FramelessWindowHint)
+        return {};
+    return m_data.customMargins;
+}
+
 /*!
     \brief Sets custom margins to be added to the default margins determined by
     the windows style in the handling of the WM_NCCALCSIZE message.
@@ -3067,6 +3093,10 @@ void QWindowsWindow::setMenuBar(QWindowsMenuBar *mb)
 
 void QWindowsWindow::setCustomMargins(const QMargins &newCustomMargins)
 {
+    if (m_data.flags & Qt::FramelessWindowHint) {
+        qCWarning(lcQpaWindows) << "You should not set custom margins for a frameless window.";
+        return;
+    }
     if (newCustomMargins != m_data.customMargins) {
         const QMargins oldCustomMargins = m_data.customMargins;
         m_data.customMargins = newCustomMargins;
diff --git forkSrcPrefix/qtbase/src/plugins/platforms/windows/qwindowswindow.h forkDstPrefix/qtbase/src/plugins/platforms/windows/qwindowswindow.h
index af577363723b7e9c3021138bede6d2d34d550721..fd433b822086dddd6ea7a483a53b20ddf4b48886 100644
--- forkSrcPrefix/qtbase/src/plugins/platforms/windows/qwindowswindow.h
+++ forkDstPrefix/qtbase/src/plugins/platforms/windows/qwindowswindow.h
@@ -307,7 +307,7 @@ public:
     QWindowsMenuBar *menuBar() const;
     void setMenuBar(QWindowsMenuBar *mb);
 
-    QMargins customMargins() const override { return m_data.customMargins; }
+    QMargins customMargins() const override;
     void setCustomMargins(const QMargins &m) override;
 
     void setStyle(unsigned s) const;
