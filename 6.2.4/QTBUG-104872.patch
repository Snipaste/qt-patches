diff --git forkSrcPrefix/qtbase/src/plugins/platforms/windows/qwindowsmime.cpp forkDstPrefix/qtbase/src/plugins/platforms/windows/qwindowsmime.cpp
index 4815a2c0b56058f3551ab119f472b537ce7f3f57..d0745667997b0e5fe1c15558a9ef4f574a450dae 100644
--- forkSrcPrefix/qtbase/src/plugins/platforms/windows/qwindowsmime.cpp
+++ forkDstPrefix/qtbase/src/plugins/platforms/windows/qwindowsmime.cpp
@@ -929,6 +929,7 @@ public:
     QVariant convertToMime(const QString &mime, IDataObject *pDataObj, QMetaType preferredType) const override;
     QString mimeForFormat(const FORMATETC &formatetc) const override;
 private:
+    bool hasOriginalDIBV5(IDataObject *pDataObj) const;
     UINT CF_PNG;
 };
 
@@ -1010,15 +1011,40 @@ bool QWindowsMimeImage::convertFromMime(const FORMATETC &formatetc, const QMimeD
     return false;
 }
 
+bool QWindowsMimeImage::hasOriginalDIBV5(IDataObject *pDataObj) const
+{
+    bool isSynthesized = true;
+    IEnumFORMATETC *pEnum = nullptr;
+    HRESULT res = pDataObj->EnumFormatEtc(1, &pEnum);
+    if (res == S_OK && pEnum) {
+        FORMATETC fc;
+        while ((res = pEnum->Next(1, &fc, nullptr)) == S_OK) {
+            if (fc.ptd)
+                CoTaskMemFree(fc.ptd);
+            if (fc.cfFormat == CF_DIB)
+                break;
+            if (fc.cfFormat == CF_DIBV5) {
+                isSynthesized = false;
+                break;
+            }
+        }
+        pEnum->Release();
+    }
+    return !isSynthesized;
+}
+
 QVariant QWindowsMimeImage::convertToMime(const QString &mimeType, IDataObject *pDataObj, QMetaType preferredType) const
 {
     Q_UNUSED(preferredType);
     QVariant result;
     if (mimeType != u"application/x-qt-image")
         return result;
-    //Try to convert from DIBV5 as it is the most
-    //widespread format that support transparency
-    if (canGetData(CF_DIBV5, pDataObj)) {
+    // Try to convert from DIBV5 as it is the most widespread format that supports transparency,
+   // but avoid synthesizing it, as that typically loses transparency, e.g. from Office
+   const bool canGetDibV5 = canGetData(CF_DIBV5, pDataObj);
+   const bool hasOrigDibV5 = canGetDibV5 ? hasOriginalDIBV5(pDataObj) : false;
+   qCDebug(lcQpaMime) << "canGetDibV5:" << canGetDibV5 << "hasOrigDibV5:" << hasOrigDibV5;
+   if (hasOrigDibV5) {
         QImage img;
         QByteArray data = getData(CF_DIBV5, pDataObj);
         QBuffer buffer(&data);
